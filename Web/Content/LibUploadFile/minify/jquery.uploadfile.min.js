/*!
 * jQuery Upload File Plugin
 * version: 4.0.11
 * @requires jQuery v1.5 or later & form plugin
 * Copyright (c) 2013 Ravishanker Kusuma
 * http://hayageek.com/
 */ !function (e) { void 0 == e.fn.ajaxForm && e.getScript("/Content/LibUploadFile/jquery.form.js", function (e, a, t) { }); var a = {}; a.fileapi = void 0 !== e("<input type='file'/>").get(0).files, a.formdata = void 0 !== window.FormData, e.fn.uploadFile = function (t) { var r = e.extend({ url: "", method: "POST", enctype: "multipart/form-data", returnType: null, allowDuplicates: !0, duplicateStrict: !1, allowedTypes: "*", acceptFiles: "*", fileName: "file", formData: !1, dynamicFormData: !1, maxFileSize: -1, maxFileCount: -1, multiple: !0, dragDrop: !0, autoSubmit: !0, showCancel: !0, showAbort: !0, showDone: !1, showDelete: !1, showError: !0, showViewFile: !1, showStatusAfterSuccess: !0, showStatusAfterError: !0, showFileCounter: !0, fileCounterStyle: "). ", showFileSize: !0, showProgress: !1, nestedForms: !0, showDownload: !1, onLoad: function (e) { }, onSelect: function (e) { return !0 }, onSubmit: function (e, a) { }, onSuccess: function (e, a, t, r) { }, onError: function (e, a, t, r) { }, onCancel: function (e, a) { }, onAbort: function (e, a) { }, downloadCallback: !1, viewfileCallback: !1, deleteCallback: !1, afterUploadAll: !1, serialize: !0, sequential: !1, sequentialCount: 2, customProgressBar: !1, abortButtonClass: "ajax-file-upload-abort", cancelButtonClass: "ajax-file-upload-cancel", dragDropContainerClass: "ajax-upload-dragdrop", dragDropHoverClass: "state-hover", errorClass: "ajax-file-upload-error", uploadButtonClass: "ajax-file-upload", dragDropStr: "<span><b>K\xe9o &amp; thả file</b></span>", uploadStr: "Tải l\xean", abortStr: "Huỷ bỏ", cancelStr: "Huỷ bỏ", deleteStr: "Xo\xe1", doneStr: "Xong", multiDragErrorStr: "Kh\xf4ng được tải l\xean. Số file tối đa được tải l\xean l\xe0: 1", extErrorStr: "is not allowed. Allowed extensions: ", duplicateErrorStr: "is not allowed. File already exists.", sizeErrorStr: "is not allowed. Allowed Max size: ", uploadErrorStr: "Tập tin kh\xf4ng được hỗ trợ", maxFileCountErrorStr: " kh\xf4ng được tải l\xean. Số file tối đa được tải l\xean l\xe0:", downloadStr: "Download", viewfileStr: "ViewFile", customErrorKeyStr: "jquery-upload-file-error", showQueueDiv: !1, statusBarWidth: 400, dragdropWidth: 400, showPreview: !1, previewHeight: "auto", previewWidth: "100%", extraHTML: !1, uploadQueueOrder: "top", headers: {} }, t); this.fileCounter = 1, this.selectedFiles = 0; var o = "ajax-file-upload-" + new Date().getTime(); this.formGroup = o, this.errorLog = e("<div></div>"), this.responses = [], this.existingFileNames = [], a.formdata || (r.dragDrop = !1), a.formdata && 1 !== r.maxFileCount || (r.multiple = !1), e(this).html(""); var i = this, s = e("<div>" + r.uploadStr + "</div>"); e(s).addClass(r.uploadButtonClass), function t() { if (e.fn.ajaxForm) { if (r.dragDrop) { var l, n, d, c = e('<div class="' + r.dragDropContainerClass + '" style="vertical-align:top;"></div>').width(r.dragdropWidth); e(i).append(c), e(c).append(s), e(c).append(e(r.dragDropStr)), l = i, n = r, (d = c).on("dragenter", function (a) { a.stopPropagation(), a.preventDefault(), e(this).addClass(n.dragDropHoverClass) }), d.on("dragover", function (a) { a.stopPropagation(), a.preventDefault(); var t = e(this); t.hasClass(n.dragDropContainerClass) && !t.hasClass(n.dragDropHoverClass) && t.addClass(n.dragDropHoverClass) }), d.on("drop", function (a) { a.preventDefault(), e(this).removeClass(n.dragDropHoverClass), l.errorLog.html(""); var t = a.originalEvent.dataTransfer.files; if (!n.multiple && t.length > 1) { n.showError && e("<div class='" + n.errorClass + "'>" + n.multiDragErrorStr + "</div>").appendTo(l.errorLog); return } !1 != n.onSelect(t) && f(n, l, t) }), d.on("dragleave", function (a) { e(this).removeClass(n.dragDropHoverClass) }), e(document).on("dragenter", function (e) { e.stopPropagation(), e.preventDefault() }), e(document).on("dragover", function (a) { a.stopPropagation(), a.preventDefault(); var t = e(this); t.hasClass(n.dragDropContainerClass) || t.removeClass(n.dragDropHoverClass) }), e(document).on("drop", function (a) { a.stopPropagation(), a.preventDefault(), e(this).removeClass(n.dragDropHoverClass) }) } else e(i).append(s); e(i).append(i.errorLog), r.showQueueDiv ? i.container = e("#" + r.showQueueDiv) : i.container = e("<div class='ajax-file-upload-container'></div>").insertAfter(e(i)), r.onLoad.call(this, i), function t(r, o, i, s) { var l = "ajax-upload-id-" + new Date().getTime(), n = e("<form method='" + i.method + "' action='" + i.url + "' enctype='" + i.enctype + "'></form>"), d = "<input type='file' id='" + l + "' name='" + i.fileName + "' accept='" + i.acceptFiles + "'/>"; i.multiple && (i.fileName.indexOf("[]") != i.fileName.length - 2 && (i.fileName += "[]"), d = "<input type='file' id='" + l + "' name='" + i.fileName + "' accept='" + i.acceptFiles + "' multiple/>"); var c = e(d).appendTo(n); c.change(function () { r.errorLog.html(""), i.allowedTypes.toLowerCase().split(","); var l = []; if (this.files) { for (h = 0; h < this.files.length; h++)l.push(this.files[h].name); if (!1 == i.onSelect(this.files)) return } else { var d = e(this).val(), c = []; if (l.push(d), !m(r, i, d)) { i.showError && e("<div class='" + i.errorClass + "'><b>" + d + "</b> " + i.extErrorStr + i.allowedTypes + "</div>").appendTo(r.errorLog); return } if (c.push({ name: d, size: "NA" }), !1 == i.onSelect(c)) return } if (g(i, r), s.unbind("click"), n.hide(), t(r, o, i, s), n.addClass(o), i.serialize && a.fileapi && a.formdata) { n.removeClass(o); var u = this.files; n.remove(), f(i, r, u) } else { for (var p = "", h = 0; h < l.length; h++)i.showFileCounter ? p += r.fileCounter + i.fileCounterStyle + l[h] + "<br>" : p += l[h] + "<br>", r.fileCounter++; if (-1 != i.maxFileCount && r.selectedFiles + l.length > i.maxFileCount) { i.showError && e("<div class='" + i.errorClass + "'><b>" + p + "</b> " + i.maxFileCountErrorStr + i.maxFileCount + "</div>").appendTo(r.errorLog); return } r.selectedFiles += l.length; var v = new b(r, i); v.filename.html(p), $(n, i, v, l, r, null) } }), i.nestedForms ? (n.css({ margin: 0, padding: 0 }), s.css({ position: "relative", overflow: "hidden", cursor: "default" }), c.css({ position: "absolute", cursor: "pointer", top: "0px", width: "100%", height: "100%", left: "0px", "z-index": "100", opacity: "0.0", filter: "alpha(opacity=0)", "-ms-filter": "alpha(opacity=0)", "-khtml-opacity": "0.0", "-moz-opacity": "0.0" }), n.appendTo(s)) : (n.appendTo(e("body")), n.css({ margin: 0, padding: 0, display: "block", position: "absolute", left: "-250px" }), -1 != navigator.appVersion.indexOf("MSIE ") ? s.attr("for", l) : s.click(function () { c.click() })) }(i, o, r, s) } else window.setTimeout(t, 10) }(), this.startUpload = function () { e("form").each(function (a, t) { e(this).hasClass(i.formGroup) && l.push(e(this)) }), l.length >= 1 && c() }, this.getFileCount = function () { return i.selectedFiles }, this.stopUpload = function () { e("." + r.abortButtonClass).each(function (a, t) { e(this).hasClass(i.formGroup) && e(this).click() }), e("." + r.cancelButtonClass).each(function (a, t) { e(this).hasClass(i.formGroup) && e(this).click() }) }, this.cancelAll = function () { e("." + r.cancelButtonClass).each(function (a, t) { e(this).hasClass(i.formGroup) && e(this).click() }) }, this.update = function (a) { r = e.extend(r, a), a.hasOwnProperty("url") && e("form").each(function (t, r) { e(this).attr("action", a.url) }) }, this.enqueueFile = function (e) { e instanceof File && f(r, i, [e]) }, this.reset = function (e) { i.fileCounter = 1, i.selectedFiles = 0, i.errorLog.html(""), !1 != e && i.container.html("") }, this.remove = function () { i.container.html(""), e(i).remove() }, this.createProgress = function (e, a, t) { var o = new b(this, r); o.progressDiv.show(), o.progressbar.width("100%"); var s = ""; return s = r.showFileCounter ? i.fileCounter + r.fileCounterStyle + e : e, r.showFileSize && (s += " (" + u(t) + ")"), o.filename.html(s), i.fileCounter++, i.selectedFiles++, r.showPreview && (o.preview.attr("src", a), o.preview.show()), r.showDownload && (o.download.show(), o.download.click(function () { r.downloadCallback && r.downloadCallback.call(i, [e], o) })), r.showDelete && (o.del.show(), o.del.click(function () { o.statusbar.hide().remove(), r.deleteCallback && r.deleteCallback.call(this, [e], o), i.selectedFiles -= 1, g(r, i) })), o }, this.getResponses = function () { return this.responses }; var l = [], n = [], d = !1; function c() { d || (d = !0, function e() { if (r.sequential || (r.sequentialCount = 99999), 0 == l.length && 0 == n.length) r.afterUploadAll && r.afterUploadAll(i), d = !1; else { if (n.length < r.sequentialCount) { var a = l.shift(); void 0 != a && (n.push(a), a.removeClass(i.formGroup), a.submit()) } window.setTimeout(e, 100) } }()) } function u(e) { var a = "", t = e / 1024; return parseInt(t) > 1024 ? (t / 1024).toFixed(2) + " MB" : t.toFixed(2) + " KB" } function p(a) { var t, r, o = [], i = (o = "string" == jQuery.type(a) ? a.split("&") : e.param(a).split("&")).length, s = []; for (t = 0; t < i; t++)o[t] = o[t].replace(/\+/g, " "), s.push([decodeURIComponent((r = o[t].split("="))[0]), decodeURIComponent(r[1]),]); return s } function h(a, t, r) { for (var o = e.extend({}, a), i = new FormData, s = [], l = a.fileName.replace("[]", ""), n = "", d = 0; d < r.length; d++) { if (!m(t, a, r[d].name)) { a.showError && e("<div><font color='red'><b>" + r[d].name + "</b> " + a.extErrorStr + a.allowedTypes + "</font></div>").appendTo(t.errorLog); continue } if (-1 != a.maxFileSize && r[d].size > a.maxFileSize) { a.showError && e("<div><font color='red'><b>" + r[d].name + "</b> " + a.sizeErrorStr + u(a.maxFileSize) + "</font></div>").appendTo(t.errorLog); continue } i.append(l + "[]", r[d]), s.push(r[d].name), n += t.fileCounter + "). " + r[d].name + "<br>", t.fileCounter++ } if (0 != s.length) { var c = a.formData; if (c) for (var h = p(c), f = 0; f < h.length; f++)h[f] && i.append(h[f][0], h[f][1]); o.fileData = i; var v = new b(t, a); v.filename.html(n); var w = e("<form style='display:block; position:absolute;left: 150px;' class='" + t.formGroup + "' method='" + a.method + "' action='" + a.url + "' enctype='" + a.enctype + "'></form>"); w.appendTo("body"), $(w, o, v, s, t) } } function f(a, t, r) { for (var o = 0; o < r.length; o++) { if (!m(t, a, r[o].name)) { a.showError && e("<div class='" + a.errorClass + "'><b>" + r[o].name + "</b> " + a.extErrorStr + a.allowedTypes + "</div>").appendTo(t.errorLog); continue } if (!a.allowDuplicates && v(t, r[o].name)) { a.showError && e("<div class='" + a.errorClass + "'><b>" + r[o].name + "</b> " + a.duplicateErrorStr + "</div>").appendTo(t.errorLog); continue } if (-1 != a.maxFileSize && r[o].size > a.maxFileSize) { a.showError && e("<div class='" + a.errorClass + "'><b>" + r[o].name + "</b> " + a.sizeErrorStr + u(a.maxFileSize) + "</div>").appendTo(t.errorLog); continue } if (-1 != a.maxFileCount && t.selectedFiles >= a.maxFileCount) { a.showError && e("<div class='" + a.errorClass + "'><b>" + r[o].name + "</b> " + a.maxFileCountErrorStr + a.maxFileCount + "</div>").appendTo(t.errorLog); continue } t.selectedFiles++, t.existingFileNames.push(r[o].name); var i = e.extend({}, a), s = new FormData, l = a.fileName.replace("[]", ""); s.append(l, r[o]); var n = a.formData; if (n) for (var d = p(n), c = 0; c < d.length; c++)d[c] && s.append(d[c][0], d[c][1]); i.fileData = s; var h = new b(t, a), f = ""; f = a.showFileCounter ? t.fileCounter + a.fileCounterStyle + r[o].name : r[o].name, a.showFileSize && (f += " (" + u(r[o].size) + ")"), h.filename.html(f); var w = e("<form style='display:block; position:absolute;left: 150px;' class='" + t.formGroup + "' method='" + a.method + "' action='" + a.url + "' enctype='" + a.enctype + "'></form>"); w.appendTo("body"); var g = []; g.push(r[o].name), $(w, i, h, g, t, r[o]), t.fileCounter++ } } function m(e, a, t) { var r = a.allowedTypes.toLowerCase().split(/[\s,]+/g), o = t.split(".").pop().toLowerCase(); return !("*" != a.allowedTypes && 0 > jQuery.inArray(o, r)) } function v(e, a) { var t = !1; if (e.existingFileNames.length) for (var o = 0; o < e.existingFileNames.length; o++)(e.existingFileNames[o] == a || r.duplicateStrict && e.existingFileNames[o].toLowerCase() == a.toLowerCase()) && (t = !0); return t } function w(e, a) { if (e.existingFileNames.length) for (var t = 0; t < a.length; t++) { var r = e.existingFileNames.indexOf(a[t]); -1 != r && e.existingFileNames.splice(r, 1) } } function g(a, t) { if (a.showFileCounter) { var r = e(t.container).find(".ajax-file-upload-filename").length; t.fileCounter = r + 1, e(t.container).find(".ajax-file-upload-filename").each(function (t, o) { var i = e(this).html().split(a.fileCounterStyle); parseInt(i[0]); var s = r + a.fileCounterStyle + i[1]; e(this).html(s), r-- }) } } function C(a, t) { return this.statusbar = e("<div class='ajax-file-upload-statusbar'></div>").width(t.statusBarWidth), this.preview = e("<img class='ajax-file-upload-preview' />").width(t.previewWidth).height(t.previewHeight).appendTo(this.statusbar).hide(), this.filename = e("<div class='ajax-file-upload-filename'></div>").appendTo(this.statusbar), this.progressDiv = e("<div class='ajax-file-upload-progress'>").appendTo(this.statusbar).hide(), this.progressbar = e("<div class='ajax-file-upload-bar'></div>").appendTo(this.progressDiv), this.abort = e("<div>" + t.abortStr + "</div>").appendTo(this.statusbar).hide(), this.cancel = e("<div>" + t.cancelStr + "</div>").appendTo(this.statusbar).hide(), this.done = e("<div>" + t.doneStr + "</div>").appendTo(this.statusbar).hide(), this.download = e("<div>" + t.downloadStr + "</div>").appendTo(this.statusbar).hide(), this.del = e("<div>" + t.deleteStr + "</div>").appendTo(this.statusbar).hide(), this.viewfile = e("<div>" + t.viewfileStr + "</div>").appendTo(this.statusbar).hide(), this.abort.addClass("ajax-file-upload-red"), this.done.addClass("ajax-file-upload-green"), this.viewfile.addClass("ajax-file-upload-green"), this.download.addClass("ajax-file-upload-green"), this.cancel.addClass("ajax-file-upload-red"), this.del.addClass("ajax-file-upload-red"), this } function b(a, t) { var r = null; return (r = t.customProgressBar ? new t.customProgressBar(a, t) : new C(a, t)).abort.addClass(a.formGroup), r.abort.addClass(t.abortButtonClass), r.cancel.addClass(a.formGroup), r.cancel.addClass(t.cancelButtonClass), t.extraHTML && (r.extraHTML = e("<div class='extrahtml'>" + t.extraHTML() + "</div>").insertAfter(r.filename)), "bottom" == t.uploadQueueOrder ? e(a.container).append(r.statusbar) : e(a.container).prepend(r.statusbar), r } function $(t, r, o, i, s, d) { var u = { cache: !1, contentType: !1, processData: !1, forceSync: !1, type: r.method, data: r.formData, formData: r.fileData, dataType: r.returnType, headers: r.headers, beforeSubmit: function (a, n, d) { if (!1 != r.onSubmit.call(this, i)) { if (r.dynamicFormData) { var c = p(r.dynamicFormData()); if (c) for (var u = 0; u < c.length; u++)c[u] && (r.serialize && void 0 != r.fileData ? d.formData.append(c[u][0], c[u][1]) : d.data[c[u][0]] = c[u][1]) } return r.extraHTML && e(o.extraHTML).find("input,select,textarea").each(function (a, t) { r.serialize && void 0 != r.fileData ? d.formData.append(e(this).attr("name"), e(this).val()) : d.data[e(this).attr("name")] = e(this).val() }), !0 } return o.statusbar.append("<div class='" + r.errorClass + "'>" + r.uploadErrorStr + "</div>"), o.cancel.show(), t.remove(), o.cancel.click(function () { l.splice(l.indexOf(t), 1), w(s, i), o.statusbar.remove(), r.onCancel.call(s, i, o), s.selectedFiles -= i.length, g(r, s) }), !1 }, beforeSend: function (e, t) { for (var l in t.headers) e.setRequestHeader(l, t.headers[l]); o.progressDiv.show(), o.cancel.hide(), o.done.hide(), r.showAbort && (o.abort.show(), o.abort.click(function () { w(s, i), e.abort(), s.selectedFiles -= i.length, r.onAbort.call(s, i, o) })), a.formdata ? o.progressbar.width("1%") : o.progressbar.width("5%") }, uploadProgress: function (e, a, t, i) { i > 98 && (i = 98); var s = i + "%"; i > 1 && o.progressbar.width(s), r.showProgress && (o.progressbar.html(s), o.progressbar.css("text-align", "center")) }, success: function (a, l, d) { if (o.cancel.remove(), n.pop(), "json" == r.returnType && "object" == e.type(a) && a.hasOwnProperty(r.customErrorKeyStr)) { o.abort.hide(); var c = a[r.customErrorKeyStr]; r.onError.call(this, i, 200, c, o), r.showStatusAfterError ? (o.progressDiv.hide(), o.statusbar.append("<span class='" + r.errorClass + "'>ERROR: " + c + "</span>")) : (o.statusbar.hide(), o.statusbar.remove()), s.selectedFiles -= i.length, t.remove(); return } s.responses.push(a), o.progressbar.width("100%"), r.showProgress && (o.progressbar.html("100%"), o.progressbar.css("text-align", "center")), o.abort.hide(), r.onSuccess.call(this, i, a, d, o), r.showStatusAfterSuccess ? (r.showDone ? (o.done.show(), o.done.click(function () { o.statusbar.hide("slow"), o.statusbar.remove() })) : o.done.hide(), r.showDelete ? (o.del.show(), o.del.click(function () { e.confirm({ title: "X\xc1C NHẬN X\xd3A", content: "Bạn c\xf3 chắc chắn muốn x\xf3a file n\xe0y?", buttons: { "Đồng \xfd": { class: "btn-confirm-yes btn-info", action: function () { w(s, i), o.statusbar.hide().remove(), r.deleteCallback && r.deleteCallback.call(this, a, o), s.selectedFiles -= i.length, g(r, s) } }, "Hủy bỏ": { class: "btn-danger", action: function () { } } } }) })) : o.del.hide()) : (o.statusbar.hide("slow"), o.statusbar.remove()), r.showDownload && (o.download.show(), o.download.click(function () { r.downloadCallback && r.downloadCallback(a, o) })), r.showViewFile && (o.viewfile.show(), o.viewfile.click(function () { r.viewfileCallback && r.viewfileCallback(a, o) })), t.remove() }, error: function (e, a, l) { o.cancel.remove(), n.pop(), o.abort.hide(), "abort" == e.statusText ? (o.statusbar.hide("slow").remove(), g(r, s)) : (r.onError.call(this, i, a, l, o), r.showStatusAfterError ? (o.progressDiv.hide(), o.statusbar.append("<span class='" + r.errorClass + "'>ERROR: " + l + "</span>")) : (o.statusbar.hide(), o.statusbar.remove()), s.selectedFiles -= i.length), t.remove() } }; r.showPreview && null != d && "image" == d.type.toLowerCase().split("/").shift() && function e(a, t) { if (a) { t.show(); var r = new FileReader; r.onload = function (e) { t.attr("src", e.target.result) }, r.readAsDataURL(a) } }(d, o.preview), r.autoSubmit ? (t.ajaxForm(u), l.push(t), c()) : (r.showCancel && (o.cancel.show(), o.cancel.click(function () { l.splice(l.indexOf(t), 1), w(s, i), t.remove(), o.statusbar.remove(), r.onCancel.call(s, i, o), s.selectedFiles -= i.length, g(r, s) })), t.ajaxForm(u)) } return this } }(jQuery);